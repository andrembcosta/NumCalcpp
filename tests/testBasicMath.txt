#testing some of the basic math operations 

test(+ 2 5) 7 #correct
test(+ -10000000000000 10000000000000) 0 #correct
test(+ 0 100000000) 1000000000 #incorrect, expected 100000000
test(- 1000000 1000000) 0 #correct
test(- nan nan) nan #incorrect, since nan != nan. Should print "incorrect, expected nan" 
test(- 0 1) -1 #correct
test(* 0 1000) 0 #correct
test(* 1 500) 500 #correct
test(* -1 1) -1 #correct
test(/ 1 1) 1 #correct
test(/ 0 1) 0 #correct
test(/ 0 0) nan #incorrect, since nan != nan. Program should print "incorrect, expected nan"
test(/ 1 0) inf #incorrect, since inf - inf != 0. Program should pront, "incorrect, expected inf"
test(/ -1 0) -inf #same as above, but should expect -inf
test(^ -1 2) 1 #correct
test(^ -1 0.5) nan #incorrect, since nan != nan. Program should print "incorect expected nan or -nan" 
test(^ 2 0.5) 1.4142 #incorrect, since our precision goes way beyond 4 decimal digits
test(^ 2 0.5) 1.4142135623730950488 #correct
test(^ 2 2) 4 #correct
test(logb 1000000 10) 6 #correct
test(logb 8 2) 3 #correct
test(logb 0 0) nan #incorrect, since nan != nan. Shoudl print "incorrect, expected nan"
test(logb 2 0) nan #same as above
test(logb 1 0) 0 #correct, since its a convention that 0^0 = 1
test(logb 0 1) -inf #since inf - inf != 0, this is incorrect
test(logb 10 -1) nan #same as previous two
test(logb -10 2) nan #same as above, because log is not defined for negative bases
##for the % operator, I decided to make it valid only for integers. It will round the doubles to long
##and perform the traditional % operator
test(% 2 1) 0 #correct
test(% 10 2) 0 #correct
test(% 10 3) 1 #correct 
test(%  1111 3) 1 #correct
test(% -100 3) 2 #wrong, expected -1
test(% 10 -3) 1 #correct
test(% 2.2 2.1) 0 #correct
test(% 10.1 -3.1) 1 #correct
test(% 10.1 0.3) 0 #incorrect, base will round to zero and mod 0 is invalid, so should expect nan
